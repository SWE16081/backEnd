#include<iostream>
#include"Q.h"
using namespace std;
int main()
{
	int n; cin >> n;
	int*a = new int[n];
	SeqStack<int> A;
	for (int i = 0; i < n; i++)
	{
		cin >> a[i];
		A.Push(a[i]);
	}
	A.Pop();
	A.print();
	return 0;
}
#pragma once
using namespace std;
const int StackSize = 10;
template<class T>
class SeqStack
{
private:
	int top;//栈顶指针，为栈顶元素在数组中的下标
	T data[StackSize];
public:
	SeqStack()
	{
		top = -1;
	}
	~SeqStack()//析构函数为空;
	void Push(T x);//入栈
	T Pop();//出栈
	T GetTop() { if top != -1 return data[top]; }//取栈顶元素
	int Empty() { top == -1 ? return 1 : return 0; }//判断栈是否为空
	void print();
};
template<class T>
void SeqStack<T>::Push(T x)
{
	if (top == StackSize - 1)
		throw "栈满";
	data[++top] = x;
	//top++;
	//data[top]=x;
}
template<class T>
T SeqStack<T>::Pop()
{
	if (top == -1)
		throw"栈空";
	int x = data[top--];
	//x=data[top];
	//top--;
	return x;
}
template<class T>
void SeqStack<T>::print()
{
	int count = 0;
	while (count != top+1)
	{
		cout << data[count] << " ";
		count++;
	}
	cout << endl;
}