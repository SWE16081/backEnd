#include<iostream>
#include"Q.h"
using namespace std;
int main()
{

	int n;
	cin >> n;
	int*a = new int[n];
	LinkQueue<int>A;
	for (int i = 0; i < n; i++)
	{
		cin >> a[i];
		A.EnQueue(a[i]);
	}
	A.print();
	A.DeQueue();
	A.print();
	return 0;
}
#pragma once
using namespace std;
template<class T>
struct Node
{
	T data;
	Node <T>*next;
	Node()
	{
		next = NULL;
	}
	Node(T data, Node*next)
	{
		this->next = next;
		this->data = data;
	}
};
template<class T>
class LinkQueue
{
private:
	Node<T>*front; Node<T>*rear;
public:
	LinkQueue();//初始化一个空的链队列
	~LinkQueue();//释放链队列中的各节点的存储空间
	void EnQueue(T x);//入队
	T DeQueue();//出队
	int Empty() { front = rear ? return 1 : return 0; }
	void print();//遍历
};
template<class T>
LinkQueue<T>::LinkQueue()
{
	Node<T>*s = new Node<T>();
	front = rear = s;//队头，队尾指针指向s
}
template<class T>
LinkQueue<T>::~LinkQueue()
{
	while (front != NULL)
	{
		Node<T>*p = front;
		front = front->next;
		delete p;
	}
}

template<class T>
void LinkQueue<T>::EnQueue(T x)
{
	Node<T>*s = new Node<T>();
	s->data = x;
	rear->next = s;
	rear = s;
}
template<class T>
T LinkQueue<T>::DeQueue()
{

	if (rear == front)
		throw"栈队列为空";
	Node<T>*p = new Node<T>();
	p= front->next;
	front->next=p->next;
     int x= p->data;
	 if (p->next == NULL)//判断出队列前队列长长度是否为1
		 rear = front;
	 delete p;
	 return x;
}
template<class T>
void LinkQueue<T>::print()
{
	Node<T>*p = new Node<T>();
	p = front->next;
	while (p != NULL)
	{
		cout << p->data<<" ";
		p = p->next;
	}
	cout << endl;
}