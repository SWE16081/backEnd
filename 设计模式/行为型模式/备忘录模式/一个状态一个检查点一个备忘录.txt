// 备忘录模式
// 备忘录模式的白箱实现
//备忘录角色
//一个状态 无检查点
//存储发起人对象的内部状态
//保护其内容不被发起人对象之外的任何对象所读取
class Memento{
	private $name,$state;
	function __construct($name,$state){
		$this->name=$name;
		$this->state=$state;
	}
	function setState($state){
		$this->state=$state;
	}
	function getState(){
		return $this->state;
	}


}
//发起人角色
//创建一个含有当前的内部状态的备忘录对象
//使用备忘录对象存储其内部状态
class Originator{
	// private $memento;
	// function __construct(Memento $memento){
	// 	$this->memento=$memento;
	// }
	private $state;
	// 返回新的备忘录对象
	function createMemento($name,$state){
		return new Memento($name,$state);
	}
	//恢复备忘录状态
	function restoreMemento(Memento $memento){
		$this->state=$memento->getState();
	}
	function setState($state){
		$this->state=$state;
	}
	function getState(){
		return $this->state;
	}

}
//负责人角色
//负责保存备忘录对象
//不检查备忘录对象的内容
class Caretaker{
	private $memento;
	//备忘录取值
	function retrieveMemento(){
		return $this->memento;
	}
	//备忘录赋值
	function saveMemento(Memento $memento){
		$this->memento=$memento;
	}
}
class client{
	function test(){
		$caretaker=new Caretaker();
		$originator=new Originator();
		//发起人开启状态
		$originator->setState('开启');
		//发起人创建备忘录
		$memento=$originator->createMemento('备忘录A',$originator->getState());
		//负责人存储备忘录
		$caretaker->saveMemento($memento);
		//查看当前状态
		echo '发起人状态:'.$originator->getState().'<br>';
		//修改发起人状态
		$originator->setState('关闭');
		//查看当前状态
		echo '发起人状态:'.$originator->getState().'<br>';
		//恢复发起人状态
		//获取备忘录
		$memento2=$caretaker->retrieveMemento();
		//恢复发起人状态
		$originator->restoreMemento($memento2);
			//查看当前状态
		echo '发起人状态:'.$originator->getState().'<br>';
	}
}
$client=new client();
$client->test();