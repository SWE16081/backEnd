// 闭包装饰者模式
class Starbucks {
	public $cost=10;
	function cost(){
		return $this->cost;
	}
}
class Decorator {
	function cost(Starbucks $starbucks,Closure $closure){
		return $starbucks;
	}
}
//咖啡加奶泡
class Whip extends Decorator{
    function cost(Starbucks $starbucks,Closure $closure){
		 $starbucks->cost=$starbucks->cost()+1;
		return $closure($starbucks);//执行闭包
	}
}
//咖啡加摩卡
class Mocha extends Decorator{
	function cost(Starbucks $starbucks,Closure $closure){
		$starbucks->cost=$starbucks->cost()+2;
	    return $closure($starbucks);//执行闭包
	}
}

class test{
	function test2(){
		$coffee=new Starbucks();
		//定义一个闭包用于执行具体装饰类的cost
		//cost()主要作用改变cost变量 执行$fuc闭包
		$fun=function($coffee,$fuc,$decorator){
			$decorator->cost($coffee,$fuc);
                  return $coffee;//多层嵌套的闭包获取返回值每个闭包到要有返回值 like递归
		};
		$fuc0=function($coffee){
			return $coffee;
		};
		$decorator=new Whip();
		$fuc1=function($coffee) use ($fuc0,$decorator,$fun){
			return $fun($coffee,$fuc0,$decorator);//执行$fun闭包
		};
		$decorator=new Mocha();
		$fuc2=function($coffee) use ($fuc1,$decorator,$fun){
              return $fun($coffee,$fuc1,$decorator);//执行$fun闭包
		};
		 $coffee=$fuc2($coffee);
         echo $coffee->cost();
	}
}
$a=new test();
$a->test2();